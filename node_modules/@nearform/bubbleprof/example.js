const endpoint = require('endpoint')
const ClinicBubbleprof = require('./index')
const fs = require('fs')
// const TraceEventDecoder = require('./format/trace-event-decoder')

const tool = new ClinicBubbleprof({})

tool.collect([process.execPath, '-e', 'setTimeout(() => {}, 200)'], function (err, dirname) {
  console.log('Done:', dirname)
})

// const traceevent = fs.createReadStream(__dirname + '/211575.clinic-bubbleprof/211575.clinic-bubbleprof-traceevent')
//   .pipe(new TraceEventDecoder())

// traceevent
//   .pipe(endpoint({ objectMode: true }, function (err, data) {
//     if (err) console.error('Err', err)

//     const traceEventMap = new Map()
//     for (const traceEvent of data) {
//       if (!traceEventMap.has(traceEvent.asyncId)) {
//         traceEventMap.set(traceEvent.asyncId, [])
//       }
//       traceEventMap.get(traceEvent.asyncId).push(traceEvent)
//     }

//     // filter untracked events out
//     // for (const asyncId of traceEventMap.keys()) {
//     //   if (!output.stackTrace.has(asyncId)) {
//     //     output.traceEvent.delete(asyncId)
//     //   }
//     // }

//     const asyncOperationTypes = []
//     for (const trackedTraceEvent of traceEventMap.values()) {
//       asyncOperationTypes.push(trackedTraceEvent[0].type)
//     }

//     console.log('Done', asyncOperationTypes.sort())
//   }))
